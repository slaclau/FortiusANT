digraph "classes" {
rankdir=BT
charset="utf-8"
"fortius_ant.usbTrainer.BushidoState" [color="black", fontcolor="black", label=<{BushidoState|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"fortius_ant.ExplorAntCommand.CommandLineVariables" [color="black", fontcolor="black", label=<{CommandLineVariables|SimulateTrainer<br ALIGN="LEFT"/>SimulateTrainer : bool<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>args : NoneType, Namespace<br ALIGN="LEFT"/>autostart : bool<br ALIGN="LEFT"/>autostart : bool<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>dongle : int<br ALIGN="LEFT"/>dongle : int<br ALIGN="LEFT"/>fe : int<br ALIGN="LEFT"/>fe : int<br ALIGN="LEFT"/>hrm : int<br ALIGN="LEFT"/>hrm : int<br ALIGN="LEFT"/>scs : int<br ALIGN="LEFT"/>scs : int<br ALIGN="LEFT"/>vhu : int<br ALIGN="LEFT"/>vhu : int<br ALIGN="LEFT"/>vtx : int<br ALIGN="LEFT"/>vtx : int<br ALIGN="LEFT"/>|print()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAntCommand.CommandLineVariables" [color="black", fontcolor="black", label=<{CommandLineVariables|CTRL_SerialL : int<br ALIGN="LEFT"/>CTRL_SerialL : int<br ALIGN="LEFT"/>CTRL_SerialR : int<br ALIGN="LEFT"/>CTRL_SerialR : int<br ALIGN="LEFT"/>CalibrateRR : bool<br ALIGN="LEFT"/>CalibrateRR : float<br ALIGN="LEFT"/>Cassette : list<br ALIGN="LEFT"/>Cassette : list<br ALIGN="LEFT"/>CassetteMax : int<br ALIGN="LEFT"/>CassetteMax : int<br ALIGN="LEFT"/>CassetteStart : int<br ALIGN="LEFT"/>CassetteStart : int<br ALIGN="LEFT"/>Crankset : list<br ALIGN="LEFT"/>Crankset : list<br ALIGN="LEFT"/>CranksetMax : int<br ALIGN="LEFT"/>CranksetMax : int<br ALIGN="LEFT"/>CranksetStart : int<br ALIGN="LEFT"/>CranksetStart : int<br ALIGN="LEFT"/>DeviceNumberBase : bool<br ALIGN="LEFT"/>DeviceNumberBase : int<br ALIGN="LEFT"/>GradeAdjust : int<br ALIGN="LEFT"/>GradeAdjust : int<br ALIGN="LEFT"/>GradeFactor<br ALIGN="LEFT"/>GradeFactor : int<br ALIGN="LEFT"/>GradeFactorDH<br ALIGN="LEFT"/>GradeFactorDH : int<br ALIGN="LEFT"/>GradeShift<br ALIGN="LEFT"/>GradeShift : int<br ALIGN="LEFT"/>OutputDisplay : bool<br ALIGN="LEFT"/>OutputDisplay : str<br ALIGN="LEFT"/>OutputDisplayR : int<br ALIGN="LEFT"/>OutputDisplayR : int<br ALIGN="LEFT"/>PedalStrokeAnalysis : bool<br ALIGN="LEFT"/>PedalStrokeAnalysis : bool<br ALIGN="LEFT"/>PowerFactor<br ALIGN="LEFT"/>PowerFactor : float<br ALIGN="LEFT"/>PowerMode<br ALIGN="LEFT"/>PowerMode : bool<br ALIGN="LEFT"/>Resistance<br ALIGN="LEFT"/>Resistance : bool<br ALIGN="LEFT"/>RunoffDip<br ALIGN="LEFT"/>RunoffDip : int<br ALIGN="LEFT"/>RunoffMaxSpeed<br ALIGN="LEFT"/>RunoffMaxSpeed : int<br ALIGN="LEFT"/>RunoffMinSpeed<br ALIGN="LEFT"/>RunoffMinSpeed : int<br ALIGN="LEFT"/>RunoffPower<br ALIGN="LEFT"/>RunoffPower : int<br ALIGN="LEFT"/>RunoffTime<br ALIGN="LEFT"/>RunoffTime : int<br ALIGN="LEFT"/>SettingsOnly<br ALIGN="LEFT"/>SettingsOnly : bool<br ALIGN="LEFT"/>SimulateTrainer<br ALIGN="LEFT"/>SimulateTrainer : bool<br ALIGN="LEFT"/>StatusLeds : bool<br ALIGN="LEFT"/>StatusLeds : bool<br ALIGN="LEFT"/>TacxType : bool<br ALIGN="LEFT"/>TacxType : bool<br ALIGN="LEFT"/>Tacx_Bushido : bool<br ALIGN="LEFT"/>Tacx_Bushido : bool<br ALIGN="LEFT"/>Tacx_Cadence : bool<br ALIGN="LEFT"/>Tacx_Cadence : bool<br ALIGN="LEFT"/>Tacx_Genius : bool<br ALIGN="LEFT"/>Tacx_Genius : bool<br ALIGN="LEFT"/>Tacx_MagneticBrake : bool<br ALIGN="LEFT"/>Tacx_Magneticbrake : bool<br ALIGN="LEFT"/>Tacx_MotorBrake : bool<br ALIGN="LEFT"/>Tacx_MotorBrake : bool<br ALIGN="LEFT"/>Tacx_Vortex : bool<br ALIGN="LEFT"/>Tacx_Vortex : bool<br ALIGN="LEFT"/>Transmission : str<br ALIGN="LEFT"/>Transmission : str<br ALIGN="LEFT"/>antDeviceID : NoneType<br ALIGN="LEFT"/>antDeviceID : NoneType, int<br ALIGN="LEFT"/>ant_tacx_models : list<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>args : NoneType, Namespace<br ALIGN="LEFT"/>autostart : bool<br ALIGN="LEFT"/>autostart : bool<br ALIGN="LEFT"/>ble : bool<br ALIGN="LEFT"/>ble : bool<br ALIGN="LEFT"/>bless<br ALIGN="LEFT"/>calibrate<br ALIGN="LEFT"/>calibrate : bool<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>exportTCX<br ALIGN="LEFT"/>exportTCX : bool<br ALIGN="LEFT"/>gui : bool<br ALIGN="LEFT"/>gui : bool<br ALIGN="LEFT"/>homeTrainer : bool<br ALIGN="LEFT"/>homeTrainer : bool<br ALIGN="LEFT"/>hrm : NoneType<br ALIGN="LEFT"/>hrm : int<br ALIGN="LEFT"/>imperial<br ALIGN="LEFT"/>imperial : bool<br ALIGN="LEFT"/>manual : bool<br ALIGN="LEFT"/>manual : bool<br ALIGN="LEFT"/>manualGrade : bool<br ALIGN="LEFT"/>manualGrade : bool<br ALIGN="LEFT"/>rpiANT : int<br ALIGN="LEFT"/>rpiANT : int<br ALIGN="LEFT"/>rpiBLE : int<br ALIGN="LEFT"/>rpiBLE : int<br ALIGN="LEFT"/>rpiButton : int<br ALIGN="LEFT"/>rpiButton : int<br ALIGN="LEFT"/>rpiCadence : int<br ALIGN="LEFT"/>rpiCadence : int<br ALIGN="LEFT"/>rpiShutdown : int<br ALIGN="LEFT"/>rpiShutdown : int<br ALIGN="LEFT"/>rpiTacx : int<br ALIGN="LEFT"/>rpiTacx : int<br ALIGN="LEFT"/>scs : NoneType<br ALIGN="LEFT"/>|print()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.GeniusState" [color="black", fontcolor="black", label=<{GeniusState|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"fortius_ant.RadarGraph.TestFrame" [color="black", fontcolor="black", label=<{TestFrame|CountDown : int<br ALIGN="LEFT"/>RadarGraph<br ALIGN="LEFT"/>power : list<br ALIGN="LEFT"/>step : int<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|OnPaint(event)<br ALIGN="LEFT"/>OnTimeout(evt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.antDongle.clsAntDongle" [color="black", fontcolor="black", label=<{clsAntDongle|ConfigMsg : bool<br ALIGN="LEFT"/>ConfigMsg : bool<br ALIGN="LEFT"/>Cycplus : bool<br ALIGN="LEFT"/>Cycplus : bool<br ALIGN="LEFT"/>DeviceID : NoneType<br ALIGN="LEFT"/>DeviceID : NoneType<br ALIGN="LEFT"/>DongleReconnected : bool<br ALIGN="LEFT"/>DongleReconnected : bool<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>devAntDongle : NoneType<br ALIGN="LEFT"/>devAntDongle : NoneType<br ALIGN="LEFT"/>|ApplicationRestart()<br ALIGN="LEFT"/>CTRL_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>Calibrate()<br ALIGN="LEFT"/>HRM_ChannelConfig()<br ALIGN="LEFT"/>PWR_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>PowerDisplay_unused()<br ALIGN="LEFT"/>Read(drop, timeout)<br ALIGN="LEFT"/>ResetDongle()<br ALIGN="LEFT"/>SCS_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlaveBHU_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlaveGNS_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlaveHRM_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlavePair_ChannelConfig(channel_pair, DeviceNumber, DeviceTypeID, TransmissionType)<br ALIGN="LEFT"/>SlaveSCS_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlaveTrainer_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlaveVHU_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>SlaveVTX_ChannelConfig(DeviceNumber)<br ALIGN="LEFT"/>Trainer_ChannelConfig()<br ALIGN="LEFT"/>VTX_ChannelConfig()<br ALIGN="LEFT"/>Write(messages, receive, drop, flush)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.bleDongle.clsBleCTP" [color="black", fontcolor="black", label=<{clsBleCTP|Cadence<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>CurrentPower<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentSpeed<br ALIGN="LEFT"/>CurrentSpeed : int<br ALIGN="LEFT"/>DraftingFactor : int<br ALIGN="LEFT"/>HeartRate<br ALIGN="LEFT"/>HeartRate : int<br ALIGN="LEFT"/>RollingResistance<br ALIGN="LEFT"/>RollingResistance : NoneType<br ALIGN="LEFT"/>TargetGrade<br ALIGN="LEFT"/>TargetGrade : int<br ALIGN="LEFT"/>TargetMode : NoneType<br ALIGN="LEFT"/>TargetMode : int<br ALIGN="LEFT"/>TargetPower<br ALIGN="LEFT"/>TargetPower : int<br ALIGN="LEFT"/>WindResistance<br ALIGN="LEFT"/>WindResistance : NoneType<br ALIGN="LEFT"/>WindSpeed<br ALIGN="LEFT"/>WindSpeed : NoneType<br ALIGN="LEFT"/>|Refresh()<br ALIGN="LEFT"/>SetAthleteData(HeartRate)<br ALIGN="LEFT"/>SetTrainerData(CurrentSpeed, Cadence, CurrentPower)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.bleDongle.clsBleInterface" [color="black", fontcolor="black", label=<{clsBleInterface|Message : str<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>interface : Popen, NoneType<br ALIGN="LEFT"/>jsondata : NoneType<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>|Close()<br ALIGN="LEFT"/>Open()<br ALIGN="LEFT"/>Read()<br ALIGN="LEFT"/>Write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.bleBlessClass.clsBleServer" [color="black", fontcolor="black", label=<{clsBleServer|BlessServer : BlessServerCoreBluetooth, BlessServerWinRT, BlessServerBlueZDBus<br ALIGN="LEFT"/>BlessServer : NoneType<br ALIGN="LEFT"/>ClientConnected<br ALIGN="LEFT"/>ClientConnected : bool<br ALIGN="LEFT"/>ClientWasConnected<br ALIGN="LEFT"/>ClientWasConnected : bool<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>loop : NoneType<br ALIGN="LEFT"/>loop : NoneType<br ALIGN="LEFT"/>myGattDefinition<br ALIGN="LEFT"/>myGattDefinition : str<br ALIGN="LEFT"/>myServiceName<br ALIGN="LEFT"/>myServiceName : str<br ALIGN="LEFT"/>|<I>ClientDisconnected</I>()<br ALIGN="LEFT"/>Close()<br ALIGN="LEFT"/>Open()<br ALIGN="LEFT"/>ReadRequest(characteristic: BlessGATTCharacteristic): bytearray<br ALIGN="LEFT"/>WriteRequest(characteristic: BlessGATTCharacteristic, value: Any)<br ALIGN="LEFT"/>logfileConsole(message)<br ALIGN="LEFT"/>logfileTraceback(exception)<br ALIGN="LEFT"/>logfileWrite(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.settings.clsData" [color="black", fontcolor="black", label=<{clsData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"fortius_ant.ExplorAnt.clsDeviceID" [color="black", fontcolor="black", label=<{clsDeviceID|Channel<br ALIGN="LEFT"/>DeviceNumber<br ALIGN="LEFT"/>DeviceType<br ALIGN="LEFT"/>DeviceTypeID<br ALIGN="LEFT"/>TransmissionType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"fortius_ant.bleBless.clsFTMS_bless" [color="black", fontcolor="black", label=<{clsFTMS_bless|Cadence<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>CurrentPower<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentSpeed<br ALIGN="LEFT"/>CurrentSpeed : int<br ALIGN="LEFT"/>DraftingFactor : int<br ALIGN="LEFT"/>HasControl : bool<br ALIGN="LEFT"/>HasControl : bool<br ALIGN="LEFT"/>HeartRate<br ALIGN="LEFT"/>HeartRate : int<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>RollingResistance<br ALIGN="LEFT"/>RollingResistance : int<br ALIGN="LEFT"/>Started : bool<br ALIGN="LEFT"/>Started : bool<br ALIGN="LEFT"/>TargetGrade : int<br ALIGN="LEFT"/>TargetGrade : int<br ALIGN="LEFT"/>TargetMode : NoneType<br ALIGN="LEFT"/>TargetMode : int<br ALIGN="LEFT"/>TargetPower : int<br ALIGN="LEFT"/>TargetPower : int<br ALIGN="LEFT"/>WindResistance<br ALIGN="LEFT"/>WindResistance : int<br ALIGN="LEFT"/>WindSpeed<br ALIGN="LEFT"/>WindSpeed : int<br ALIGN="LEFT"/>|ClientDisconnected()<br ALIGN="LEFT"/>ReadRequest(characteristic: BlessGATTCharacteristic): bytearray<br ALIGN="LEFT"/>Refresh()<br ALIGN="LEFT"/>SetAthleteData(HeartRate)<br ALIGN="LEFT"/>SetTrainerData(CurrentSpeed, Cadence, CurrentPower)<br ALIGN="LEFT"/>Simulator()<br ALIGN="LEFT"/>WriteRequest(characteristic: BlessGATTCharacteristic, pvalue: Any)<br ALIGN="LEFT"/>logfileConsole(message)<br ALIGN="LEFT"/>logfileTraceback(exception)<br ALIGN="LEFT"/>logfileWrite(message)<br ALIGN="LEFT"/>notifyReset()<br ALIGN="LEFT"/>notifySetIndoorBikeSimulation()<br ALIGN="LEFT"/>notifySetTargetPower()<br ALIGN="LEFT"/>notifyStartOrResume()<br ALIGN="LEFT"/>notifyStopOrPause()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAnt.clsFortiusAntConsole" [color="black", fontcolor="black", label=<{clsFortiusAntConsole|LastTime : int<br ALIGN="LEFT"/>RunningSwitch : bool<br ALIGN="LEFT"/>StatusLeds : list<br ALIGN="LEFT"/>leds : str<br ALIGN="LEFT"/>|Autostart()<br ALIGN="LEFT"/>SetLeds(ANT, BLE, Cadence, Shutdown, Tacx)<br ALIGN="LEFT"/>SetMessages(Tacx, Dongle, HRM)<br ALIGN="LEFT"/>SetValues(fSpeed, iRevs, iPower, iTargetMode, iTargetPower, fTargetGrade, iTacx, iHeartRate, iCrancksetIndex, iCassetteIndex, fReduction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAnt.clsFortiusAntParent" [color="black", fontcolor="black", label=<{clsFortiusAntParent|LastTime : int<br ALIGN="LEFT"/>PreviousMessages : tuple, NoneType<br ALIGN="LEFT"/>RunningSwitch : bool<br ALIGN="LEFT"/>app_conn<br ALIGN="LEFT"/>|ListenToChild()<br ALIGN="LEFT"/>MainCommandFromGui()<br ALIGN="LEFT"/>MainRespondToGUI(command, rtn)<br ALIGN="LEFT"/>PedalStrokeAnalysis(info, Cadence)<br ALIGN="LEFT"/>RunoffThread()<br ALIGN="LEFT"/>SetLeds(ANT, BLE, Cadence, Shutdown, Tacx)<br ALIGN="LEFT"/>SetMessages(Tacx, Dongle, HRM)<br ALIGN="LEFT"/>SetValues(fSpeed, iRevs, iPower, iTargetMode, iTargetPower, fTargetGrade, iTacx, iHeartRate, iCrancksetIndex, iCassetteIndex, fReduction)<br ALIGN="LEFT"/>Tacx2DongleThread()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.logfile.clsLogfileJson" [color="black", fontcolor="black", label=<{clsLogfileJson|LastPedalEcho : int<br ALIGN="LEFT"/>NrTrackpoints : NoneType<br ALIGN="LEFT"/>PedalCycle : int<br ALIGN="LEFT"/>first : bool<br ALIGN="LEFT"/>jsonFile : NoneType<br ALIGN="LEFT"/>|Close()<br ALIGN="LEFT"/>Write(QuarterSecond, TacxTrainer, tcx, HeartRate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.RadarGraph.clsRadarGraph" [color="black", fontcolor="black", label=<{clsRadarGraph|Cadence : int<br ALIGN="LEFT"/>StartTime : int<br ALIGN="LEFT"/>cx<br ALIGN="LEFT"/>cy<br ALIGN="LEFT"/>data : list<br ALIGN="LEFT"/>maxval : float, int<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>polypoints : list<br ALIGN="LEFT"/>radius100<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>wh<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|Angle(Timestamp)<br ALIGN="LEFT"/>OnPaint(dc)<br ALIGN="LEFT"/>PedalStrokeAnalysis(info, Cadence)<br ALIGN="LEFT"/>PolarToCartesian(angle, radius, cx, cy)<br ALIGN="LEFT"/>ShowRadarGraph(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.raspberry.clsRaspberry" [color="black", fontcolor="black", label=<{clsRaspberry|BtnShutdown<br ALIGN="LEFT"/>BtnShutdown : NoneType<br ALIGN="LEFT"/>ButtonDefaultValue<br ALIGN="LEFT"/>ButtonDefaultValue : bool<br ALIGN="LEFT"/>DisplayState<br ALIGN="LEFT"/>DisplayState : NoneType<br ALIGN="LEFT"/>DrawLeds<br ALIGN="LEFT"/>DrawLeds : NoneType<br ALIGN="LEFT"/>LedANT<br ALIGN="LEFT"/>LedANT : NoneType<br ALIGN="LEFT"/>LedANTState : bool<br ALIGN="LEFT"/>LedANTState : bool, NoneType<br ALIGN="LEFT"/>LedBLE<br ALIGN="LEFT"/>LedBLE : NoneType<br ALIGN="LEFT"/>LedBLEState : bool<br ALIGN="LEFT"/>LedBLEState : bool, NoneType<br ALIGN="LEFT"/>LedCadence<br ALIGN="LEFT"/>LedCadence : NoneType<br ALIGN="LEFT"/>LedCadenceState : bool<br ALIGN="LEFT"/>LedCadenceState : bool, NoneType<br ALIGN="LEFT"/>LedShutdown<br ALIGN="LEFT"/>LedShutdown : NoneType<br ALIGN="LEFT"/>LedShutdownState : bool<br ALIGN="LEFT"/>LedShutdownState : bool, NoneType<br ALIGN="LEFT"/>LedTacx<br ALIGN="LEFT"/>LedTacx : NoneType<br ALIGN="LEFT"/>LedTacxState : bool<br ALIGN="LEFT"/>LedTacxState : bool, NoneType<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>OutputDisplay<br ALIGN="LEFT"/>OutputDisplay : bool<br ALIGN="LEFT"/>SetValues<br ALIGN="LEFT"/>SetValues : NoneType<br ALIGN="LEFT"/>StatusLeds<br ALIGN="LEFT"/>StatusLeds : bool<br ALIGN="LEFT"/>backlight<br ALIGN="LEFT"/>buttonA<br ALIGN="LEFT"/>buttonA : NoneType<br ALIGN="LEFT"/>buttonB<br ALIGN="LEFT"/>buttonB : NoneType<br ALIGN="LEFT"/>buttonDown : bool<br ALIGN="LEFT"/>buttonDown : bool<br ALIGN="LEFT"/>buttonUp : bool<br ALIGN="LEFT"/>buttonUp : bool<br ALIGN="LEFT"/>clv<br ALIGN="LEFT"/>draw : ImageDraw<br ALIGN="LEFT"/>draw : NoneType<br ALIGN="LEFT"/>faImage : NoneType<br ALIGN="LEFT"/>faImage : NoneType<br ALIGN="LEFT"/>fontLb : FreeTypeFont<br ALIGN="LEFT"/>fontLb : NoneType<br ALIGN="LEFT"/>fontS : FreeTypeFont<br ALIGN="LEFT"/>fontS : NoneType<br ALIGN="LEFT"/>image : Image, NoneType<br ALIGN="LEFT"/>image : NoneType<br ALIGN="LEFT"/>rotation<br ALIGN="LEFT"/>rotation : int<br ALIGN="LEFT"/>st7789<br ALIGN="LEFT"/>st7789 : NoneType<br ALIGN="LEFT"/>|CheckShutdown(FortiusAntGui)<br ALIGN="LEFT"/>PowerupTest()<br ALIGN="LEFT"/>SetLeds(ANT, BLE, Cadence, Shutdown, Tacx)<br ALIGN="LEFT"/>ShutdownButtonIsHeld()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsSimulatedTrainer" [color="black", fontcolor="black", label=<{clsSimulatedTrainer|Axis : int<br ALIGN="LEFT"/>Buttons : int<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentResistance : int<br ALIGN="LEFT"/>HeartRate : float, int<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>PedalEcho : int<br ALIGN="LEFT"/>PedalEchoCount<br ALIGN="LEFT"/>PedalEchoTime<br ALIGN="LEFT"/>SpeedKmh : float<br ALIGN="LEFT"/>TargetPower : int<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>VirtualSpeedKmh : float<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|Refresh(_QuarterSecond, _TacxMode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxAntBushidoTrainer" [color="black", fontcolor="black", label=<{clsTacxAntBushidoTrainer|Buttons : int<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|DisplayStateTable(FortiusAntState)<br ALIGN="LEFT"/>HandleANTmessage(msg)<br ALIGN="LEFT"/>SendToTrainer(QuarterSecond, TacxMode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxAntGeniusTrainer" [color="black", fontcolor="black", label=<{clsTacxAntGeniusTrainer|Buttons : int<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|DisplayStateTable(FortiusAntState)<br ALIGN="LEFT"/>HandleANTmessage(msg)<br ALIGN="LEFT"/>SendToTrainer(QuarterSecond, TacxMode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxAntTrainer" [color="black", fontcolor="black", label=<{clsTacxAntTrainer|AntDevice<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>Channel<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>SpeedKmh : float<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>WheelSpeed : int<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|HandleANTmessage(msg)<br ALIGN="LEFT"/>SendToTrainer(QuarterSecond, TacxMode)<br ALIGN="LEFT"/>TargetPower2Resistance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxAntVortexTrainer" [color="black", fontcolor="black", label=<{clsTacxAntVortexTrainer|AntDevice<br ALIGN="LEFT"/>Buttons : int<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>Message : str<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>SpeedKmh : float<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>WheelSpeed : int<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|DisplayStateTable(FortiusAntState)<br ALIGN="LEFT"/>HandleANTmessage(msg)<br ALIGN="LEFT"/>SendToTrainer(QuarterSecond, TacxMode)<br ALIGN="LEFT"/>TargetPower2Resistance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxLegacyUsbTrainer" [color="black", fontcolor="black", label=<{clsTacxLegacyUsbTrainer|Axis<br ALIGN="LEFT"/>Buttons : int<br ALIGN="LEFT"/>Cadence<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentResistance<br ALIGN="LEFT"/>Headunit<br ALIGN="LEFT"/>HeartRate<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>PedalEcho<br ALIGN="LEFT"/>SpeedScale : float<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>UsbDevice<br ALIGN="LEFT"/>WheelSpeed<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|CurrentResistance2Power()<br ALIGN="LEFT"/>SendToTrainerUSBData(TacxMode, _Calibrate, _PedalEcho, Target, _Weight)<br ALIGN="LEFT"/>TargetPower2Resistance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxNewUsbTrainer" [color="black", fontcolor="black", label=<{clsTacxNewUsbTrainer|Axis<br ALIGN="LEFT"/>Buttons : int<br ALIGN="LEFT"/>Cadence<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>ControlCommand : int<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentResistance<br ALIGN="LEFT"/>Headunit<br ALIGN="LEFT"/>HeartRate<br ALIGN="LEFT"/>MotorBrake : bool<br ALIGN="LEFT"/>MotorBrakeUnitFirmware : int<br ALIGN="LEFT"/>MotorBrakeUnitSerial : int<br ALIGN="LEFT"/>MotorBrakeUnitType : int<br ALIGN="LEFT"/>MotorBrakeUnitYear : int<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>PedalEcho<br ALIGN="LEFT"/>PowerResistanceFactor : int<br ALIGN="LEFT"/>SpeedScale : float<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>TargetResistanceFT<br ALIGN="LEFT"/>UsbDevice<br ALIGN="LEFT"/>Version2 : int<br ALIGN="LEFT"/>WheelSpeed<br ALIGN="LEFT"/>currentR : list<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>targetR : list<br ALIGN="LEFT"/>|CurrentResistance2Power()<br ALIGN="LEFT"/>Resistance2PowerMB(Resistance, SpeedKmh)<br ALIGN="LEFT"/>SendToTrainerUSBData(TacxMode, Calibrate, PedalEcho, Target, Weight)<br ALIGN="LEFT"/>SendToTrainerUSBData_MotorBrake()<br ALIGN="LEFT"/>TargetPower2Resistance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxTrainer" [color="black", fontcolor="black", label=<{clsTacxTrainer|AntDevice : NoneType<br ALIGN="LEFT"/>Axis : int<br ALIGN="LEFT"/>BicycleWeight<br ALIGN="LEFT"/>BicycleWeight : int<br ALIGN="LEFT"/>BicycleWheelDiameter<br ALIGN="LEFT"/>BicycleWheelDiameter : NoneType<br ALIGN="LEFT"/>Buttons : int<br ALIGN="LEFT"/>Buttons : int<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>Cadence : int<br ALIGN="LEFT"/>CalculatedSpeedKmh : int<br ALIGN="LEFT"/>CalculatedSpeedKmh : int, float<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>Calibrate : int<br ALIGN="LEFT"/>ControlCommand : int<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentPower : int<br ALIGN="LEFT"/>CurrentResistance : int<br ALIGN="LEFT"/>CurrentResistance : int<br ALIGN="LEFT"/>DraftingFactor<br ALIGN="LEFT"/>DraftingFactor : float<br ALIGN="LEFT"/>GearRatio<br ALIGN="LEFT"/>GearRatio : NoneType<br ALIGN="LEFT"/>GearboxReduction<br ALIGN="LEFT"/>GearboxReduction : int<br ALIGN="LEFT"/>Header : int<br ALIGN="LEFT"/>Headunit : int<br ALIGN="LEFT"/>HeartRate : int<br ALIGN="LEFT"/>Message<br ALIGN="LEFT"/>Message : NoneType<br ALIGN="LEFT"/>MotorBrake : bool<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>OK : bool<br ALIGN="LEFT"/>Operational : bool<br ALIGN="LEFT"/>PedalEcho : int<br ALIGN="LEFT"/>PedalEchoCount<br ALIGN="LEFT"/>PedalEchoCount : int<br ALIGN="LEFT"/>PedalEchoTime<br ALIGN="LEFT"/>PedalEchoTime<br ALIGN="LEFT"/>PreviousButtons : int<br ALIGN="LEFT"/>PreviousButtons : int<br ALIGN="LEFT"/>PreviousPedalEcho : int<br ALIGN="LEFT"/>PreviousPedalEcho : int<br ALIGN="LEFT"/>RollingResistance<br ALIGN="LEFT"/>RollingResistance : float<br ALIGN="LEFT"/>SpeedKmh<br ALIGN="LEFT"/>SpeedKmh : int<br ALIGN="LEFT"/>SpeedScale : NoneType<br ALIGN="LEFT"/>TargetGrade : int<br ALIGN="LEFT"/>TargetGrade : int<br ALIGN="LEFT"/>TargetMode : int<br ALIGN="LEFT"/>TargetMode : int<br ALIGN="LEFT"/>TargetPower : int<br ALIGN="LEFT"/>TargetPower : int<br ALIGN="LEFT"/>TargetPowerProvided<br ALIGN="LEFT"/>TargetPowerProvided : int<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>TargetResistance : int<br ALIGN="LEFT"/>TargetResistanceFT : int<br ALIGN="LEFT"/>UsbDevice : NoneType<br ALIGN="LEFT"/>UserAndBikeWeight : int<br ALIGN="LEFT"/>UserAndBikeWeight : int<br ALIGN="LEFT"/>UserWeight<br ALIGN="LEFT"/>UserWeight : int<br ALIGN="LEFT"/>VirtualSpeedKmh : float, int<br ALIGN="LEFT"/>VirtualSpeedKmh : int<br ALIGN="LEFT"/>WheelSpeed : int<br ALIGN="LEFT"/>WindResistance<br ALIGN="LEFT"/>WindResistance : float<br ALIGN="LEFT"/>WindSpeed<br ALIGN="LEFT"/>WindSpeed : int<br ALIGN="LEFT"/>clv<br ALIGN="LEFT"/>clv : NoneType<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|AddGrade(deltaGrade)<br ALIGN="LEFT"/>AddPower(deltaPower)<br ALIGN="LEFT"/>CalibrateSupported()<br ALIGN="LEFT"/>DisplayStateTable(FortiusAntState)<br ALIGN="LEFT"/>GetTrainer(clv, AntDevice)<br ALIGN="LEFT"/>MultiplyPower(factor)<br ALIGN="LEFT"/>Power2Speed(Grade)<br ALIGN="LEFT"/>Refresh(QuarterSecond, TacxMode)<br ALIGN="LEFT"/><I>SendToTrainer</I>(QuarterSecond, TacxMode)<br ALIGN="LEFT"/>SetGearboxReduction(Reduction)<br ALIGN="LEFT"/>SetGrade(Grade)<br ALIGN="LEFT"/>SetPower(Power)<br ALIGN="LEFT"/>SetRollingResistance(RollingResistance)<br ALIGN="LEFT"/>SetUserConfiguration(UserWeight, BicycleWeight, BicycleWheelDiameter, GearRatio)<br ALIGN="LEFT"/>SetWind(WindResistance, WindSpeed, DraftingFactor)<br ALIGN="LEFT"/>TargetPower2Resistance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.usbTrainer.clsTacxUsbTrainer" [color="black", fontcolor="black", label=<{clsTacxUsbTrainer|Header : int<br ALIGN="LEFT"/>SpeedKmh<br ALIGN="LEFT"/>tacxEvent : bool<br ALIGN="LEFT"/>|SendToTrainer(_QuarterSecond, TacxMode)<br ALIGN="LEFT"/><I>SendToTrainerUSBData</I>(TacxMode, Calibrate, PedalEcho, Target, Weight)<br ALIGN="LEFT"/>SendToTrainerUSBData_MotorBrake()<br ALIGN="LEFT"/>Speed2Wheel(SpeedKmh)<br ALIGN="LEFT"/>USB_Read()<br ALIGN="LEFT"/>USB_Read_retry4x40(expectedHeader)<br ALIGN="LEFT"/>Wheel2Speed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.TCXexport.clsTcxExport" [color="black", fontcolor="black", label=<{clsTcxExport|Distance : int<br ALIGN="LEFT"/>ElapsedTime : int<br ALIGN="LEFT"/>HeartRateMax : int<br ALIGN="LEFT"/>NrCadence : int<br ALIGN="LEFT"/>NrHeartRate : int<br ALIGN="LEFT"/>NrTrackpoints : int<br ALIGN="LEFT"/>StartTime : datetime<br ALIGN="LEFT"/>StartTimeSeconds<br ALIGN="LEFT"/>SumCadence : int<br ALIGN="LEFT"/>SumHeartRate : int<br ALIGN="LEFT"/>TotalCalories : int<br ALIGN="LEFT"/>TotalDistance : int<br ALIGN="LEFT"/>TotalTimeSeconds : int<br ALIGN="LEFT"/>TrackpointAltitude : int<br ALIGN="LEFT"/>TrackpointCadence : int<br ALIGN="LEFT"/>TrackpointCurrentPower : int<br ALIGN="LEFT"/>TrackpointDistance : int<br ALIGN="LEFT"/>TrackpointHeartRate : int<br ALIGN="LEFT"/>TrackpointSpeedKmh : int<br ALIGN="LEFT"/>TrackpointTime : str<br ALIGN="LEFT"/>TrackpointXcalled : int<br ALIGN="LEFT"/>TrackpointXwritten : int<br ALIGN="LEFT"/>tcx : str<br ALIGN="LEFT"/>|Start()<br ALIGN="LEFT"/>Stop()<br ALIGN="LEFT"/>TcxTime(dt)<br ALIGN="LEFT"/>Trackpoint(Latitude, Longitude, Altitude, Distance, HeartRate, Cadence, Watts, SpeedKmh)<br ALIGN="LEFT"/>TrackpointX(TacxTrainer, HeartRate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.settings.dlgFortiusAntSettings" [color="black", fontcolor="black", label=<{dlgFortiusAntSettings|btnCancel<br ALIGN="LEFT"/>btnHelp<br ALIGN="LEFT"/>btnOK<br ALIGN="LEFT"/>cb_A<br ALIGN="LEFT"/>cb_M<br ALIGN="LEFT"/>cb_P<br ALIGN="LEFT"/>cb_a<br ALIGN="LEFT"/>cb_b<br ALIGN="LEFT"/>cb_bb<br ALIGN="LEFT"/>cb_d1<br ALIGN="LEFT"/>cb_d16<br ALIGN="LEFT"/>cb_d2<br ALIGN="LEFT"/>cb_d32<br ALIGN="LEFT"/>cb_d4<br ALIGN="LEFT"/>cb_d64<br ALIGN="LEFT"/>cb_d8<br ALIGN="LEFT"/>cb_e<br ALIGN="LEFT"/>cb_g<br ALIGN="LEFT"/>cb_i<br ALIGN="LEFT"/>cb_m<br ALIGN="LEFT"/>cb_n<br ALIGN="LEFT"/>cb_r<br ALIGN="LEFT"/>cb_restart<br ALIGN="LEFT"/>cb_s<br ALIGN="LEFT"/>cb_saveJson<br ALIGN="LEFT"/>cb_x<br ALIGN="LEFT"/>combo_t<br ALIGN="LEFT"/>lblAdvanced<br ALIGN="LEFT"/>lblBasic<br ALIGN="LEFT"/>lblDeveloper<br ALIGN="LEFT"/>lblPower<br ALIGN="LEFT"/>lbl_D<br ALIGN="LEFT"/>lbl_G<br ALIGN="LEFT"/>lbl_H<br ALIGN="LEFT"/>lbl_R<br ALIGN="LEFT"/>lbl_c<br ALIGN="LEFT"/>lbl_d<br ALIGN="LEFT"/>lbl_p<br ALIGN="LEFT"/>lbl_t<br ALIGN="LEFT"/>txt_D<br ALIGN="LEFT"/>txt_G1<br ALIGN="LEFT"/>txt_G2<br ALIGN="LEFT"/>txt_H<br ALIGN="LEFT"/>txt_R1<br ALIGN="LEFT"/>txt_R2<br ALIGN="LEFT"/>txt_R3<br ALIGN="LEFT"/>txt_R4<br ALIGN="LEFT"/>txt_R5<br ALIGN="LEFT"/>txt_c<br ALIGN="LEFT"/>txt_d<br ALIGN="LEFT"/>txt_p<br ALIGN="LEFT"/>|EVT_BUTTON_btnCancel(event)<br ALIGN="LEFT"/>EVT_BUTTON_btnHelp(event)<br ALIGN="LEFT"/>EVT_BUTTON_btnOK(event)<br ALIGN="LEFT"/>EVT_CHAR_txt_D(event)<br ALIGN="LEFT"/>EVT_CHAR_txt_H(event)<br ALIGN="LEFT"/>EVT_CHAR_txt_d(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_A(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_M(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_a(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_b(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_bb(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_d(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_e(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_g(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_i(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_m(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_restart(event)<br ALIGN="LEFT"/>EVT_CHECKBOX_cb_s(event)<br ALIGN="LEFT"/>EVT_COMBOBOX_combo_t(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_G1(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_G2(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_R1(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_R2(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_R3(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_R4(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_R5(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_d(event)<br ALIGN="LEFT"/>EVT_KILL_FOCUS_txt_p(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAnt.frmFortiusAnt" [color="black", fontcolor="black", label=<{frmFortiusAnt|<br ALIGN="LEFT"/>|callIdleFunction()<br ALIGN="LEFT"/>callLocateHW()<br ALIGN="LEFT"/>callRunoff()<br ALIGN="LEFT"/>callSettings(RestartApplication, pclv)<br ALIGN="LEFT"/>callTacx2Dongle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAnt.frmFortiusAntChild" [color="black", fontcolor="black", label=<{frmFortiusAntChild|gui_conn<br ALIGN="LEFT"/>|GuiMessageToMain(command, wait, p1, p2)<br ALIGN="LEFT"/>OnClick_btnStop(event)<br ALIGN="LEFT"/>OnClose(event)<br ALIGN="LEFT"/>callIdleFunction()<br ALIGN="LEFT"/>callLocateHW()<br ALIGN="LEFT"/>callRunoff()<br ALIGN="LEFT"/>callSettings(RestartApplication, pclv)<br ALIGN="LEFT"/>callTacx2Dongle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAntGui.frmFortiusAntGui" [color="black", fontcolor="black", label=<{frmFortiusAntGui|BackgroundBitmap : bool<br ALIGN="LEFT"/>Calibrating : bool<br ALIGN="LEFT"/>Calibrating : bool<br ALIGN="LEFT"/>CassetteBitmap<br ALIGN="LEFT"/>CassetteIndex : NoneType<br ALIGN="LEFT"/>CassetteWH : int<br ALIGN="LEFT"/>CassetteX : int<br ALIGN="LEFT"/>CassetteY : int<br ALIGN="LEFT"/>CloseButtonPressed : bool<br ALIGN="LEFT"/>CranksetIndex : NoneType<br ALIGN="LEFT"/>CranksetWH : int<br ALIGN="LEFT"/>CranksetX : int<br ALIGN="LEFT"/>CranksetY<br ALIGN="LEFT"/>HeartRate : int<br ALIGN="LEFT"/>HeartRateImage : bool<br ALIGN="LEFT"/>HeartRateWH : int<br ALIGN="LEFT"/>HeartRateX : int<br ALIGN="LEFT"/>HeartRateY : int<br ALIGN="LEFT"/>IdleDone<br ALIGN="LEFT"/>IdleDone : int<br ALIGN="LEFT"/>LastFields : int<br ALIGN="LEFT"/>LastFields : int<br ALIGN="LEFT"/>LastHeart<br ALIGN="LEFT"/>LastHeart : int<br ALIGN="LEFT"/>OnTimerEnabled : bool<br ALIGN="LEFT"/>Power : SpeedMeter<br ALIGN="LEFT"/>PowerArray : ndarray<br ALIGN="LEFT"/>PowerMax : int<br ALIGN="LEFT"/>RadarGraph<br ALIGN="LEFT"/>Reduction : int<br ALIGN="LEFT"/>Revs : SpeedMeter<br ALIGN="LEFT"/>RevsMax : int<br ALIGN="LEFT"/>RunningSwitch : bool<br ALIGN="LEFT"/>Speed : SpeedMeter<br ALIGN="LEFT"/>SpeedMax : int<br ALIGN="LEFT"/>StatusLeds : list<br ALIGN="LEFT"/>StatusLedsXr<br ALIGN="LEFT"/>StatusLedsXr : NoneType<br ALIGN="LEFT"/>StatusLedsYb<br ALIGN="LEFT"/>StatusLedsYb : NoneType<br ALIGN="LEFT"/>bmp36x36<br ALIGN="LEFT"/>bmp40x40<br ALIGN="LEFT"/>btnHelp<br ALIGN="LEFT"/>btnLocateHW<br ALIGN="LEFT"/>btnRunoff<br ALIGN="LEFT"/>btnSettings<br ALIGN="LEFT"/>btnSponsor<br ALIGN="LEFT"/>btnStart<br ALIGN="LEFT"/>btnStop<br ALIGN="LEFT"/>clv : NoneType<br ALIGN="LEFT"/>clv : NoneType<br ALIGN="LEFT"/>panel<br ALIGN="LEFT"/>power : list<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>txtAntDongle<br ALIGN="LEFT"/>txtAntHRM<br ALIGN="LEFT"/>txtCassette<br ALIGN="LEFT"/>txtCrankset<br ALIGN="LEFT"/>txtHeartRate<br ALIGN="LEFT"/>txtHeartRateShown : bool<br ALIGN="LEFT"/>txtHeartRateSpace<br ALIGN="LEFT"/>txtPower<br ALIGN="LEFT"/>txtRevs<br ALIGN="LEFT"/>txtSpeed<br ALIGN="LEFT"/>txtTacx<br ALIGN="LEFT"/>txtTarget<br ALIGN="LEFT"/>txtUsbTrainer<br ALIGN="LEFT"/>|Autostart()<br ALIGN="LEFT"/>DrawLed(dc, r, g, b, x, y, radius, on, label)<br ALIGN="LEFT"/>Navigate_Back()<br ALIGN="LEFT"/>Navigate_Down()<br ALIGN="LEFT"/>Navigate_Enter()<br ALIGN="LEFT"/>Navigate_Up()<br ALIGN="LEFT"/>OnClick_btnHelp(event)<br ALIGN="LEFT"/>OnClick_btnLocateHW(event)<br ALIGN="LEFT"/>OnClick_btnRunoff(event)<br ALIGN="LEFT"/>OnClick_btnRunoff_Done()<br ALIGN="LEFT"/>OnClick_btnRunoff_Thread()<br ALIGN="LEFT"/>OnClick_btnSettings(event)<br ALIGN="LEFT"/>OnClick_btnSponsor(event)<br ALIGN="LEFT"/>OnClick_btnStart(event)<br ALIGN="LEFT"/>OnClick_btnStart_Done()<br ALIGN="LEFT"/>OnClick_btnStart_Thread()<br ALIGN="LEFT"/>OnClick_btnStop(event)<br ALIGN="LEFT"/>OnClose(event)<br ALIGN="LEFT"/>OnPaint(event)<br ALIGN="LEFT"/>OnTimer(event)<br ALIGN="LEFT"/>PedalStrokeAnalysis(info, Cadence)<br ALIGN="LEFT"/>ResetValues()<br ALIGN="LEFT"/>SetLeds(ANT, BLE, Cadence, Shutdown, Tacx)<br ALIGN="LEFT"/>SetLedsGUI(ANT, BLE, Cadence, Shutdown, Tacx)<br ALIGN="LEFT"/>SetMessages(Tacx, Dongle, HRM)<br ALIGN="LEFT"/>SetMessagesGUI(Tacx, Dongle, HRM)<br ALIGN="LEFT"/>SetValues(fSpeed, iRevs, iPower, iTargetMode, iTargetPower, fTargetGrade, iTacx, iHeartRate, iCranksetIndex, iCassetteIndex, fReduction)<br ALIGN="LEFT"/>SetValuesGUI(fSpeed, iRevs, iPower, iTargetMode, iTargetPower, fTargetGrade, iTacx, iHeartRate, iCranksetIndex, iCassetteIndex, fReduction)<br ALIGN="LEFT"/>callIdleFunction()<br ALIGN="LEFT"/>callLocateHW()<br ALIGN="LEFT"/>callRunoff()<br ALIGN="LEFT"/>callSettings(RestartApplication, pclv)<br ALIGN="LEFT"/>callTacx2Dongle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"fortius_ant.FortiusAnt.frmFortiusAnt" -> "fortius_ant.FortiusAntGui.frmFortiusAntGui" [arrowhead="empty", arrowtail="none"];
"fortius_ant.FortiusAnt.frmFortiusAntChild" -> "fortius_ant.FortiusAntGui.frmFortiusAntGui" [arrowhead="empty", arrowtail="none"];
"fortius_ant.bleBless.clsFTMS_bless" -> "fortius_ant.bleBlessClass.clsBleServer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.bleDongle.clsBleCTP" -> "fortius_ant.bleDongle.clsBleInterface" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsSimulatedTrainer" -> "fortius_ant.usbTrainer.clsTacxTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxAntBushidoTrainer" -> "fortius_ant.usbTrainer.clsTacxAntTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxAntGeniusTrainer" -> "fortius_ant.usbTrainer.clsTacxAntTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxAntTrainer" -> "fortius_ant.usbTrainer.clsTacxTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxAntVortexTrainer" -> "fortius_ant.usbTrainer.clsTacxTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxLegacyUsbTrainer" -> "fortius_ant.usbTrainer.clsTacxUsbTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxNewUsbTrainer" -> "fortius_ant.usbTrainer.clsTacxUsbTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.usbTrainer.clsTacxUsbTrainer" -> "fortius_ant.usbTrainer.clsTacxTrainer" [arrowhead="empty", arrowtail="none"];
"fortius_ant.RadarGraph.clsRadarGraph" -> "fortius_ant.FortiusAntGui.frmFortiusAntGui" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RadarGraph", style="solid"];
"fortius_ant.RadarGraph.clsRadarGraph" -> "fortius_ant.RadarGraph.TestFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RadarGraph", style="solid"];
"fortius_ant.FortiusAntGui.frmFortiusAntGui" -> "fortius_ant.FortiusAntGui.frmFortiusAntGui" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="panel", style="solid"];
}
